{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_media_mtk_94C26753C267389E_Projects_Forfun_web_tic_tac_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_media_mtk_94C26753C267389E_Projects_Forfun_web_tic_tac_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_media_mtk_94C26753C267389E_Projects_Forfun_web_tic_tac_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","output","length","array","index","slice","calculateWinner","setState","concat","squares_2","getState","state_value","myData","split","map","parseFloat","max_val","maxIndex","updateValues","status","_this3","current","winner","handleClick","lines","_lines$i","_media_mtk_94C26753C267389E_Projects_Forfun_web_tic_tac_toe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be164cb2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport myData from './resources/x_player_movies.json';\nimport { stat } from 'fs';\n\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n    \n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0\n        };\n    }\n    getState(squares) {\n        let output = \"\";\n        for (var i = 0; i < squares.length; i++) {\n            if (squares[i] === null || squares[i] === \"\") {\n                output += \"-\";\n            } else {\n                output += squares[i];\n            }\n        }\n        return output;\n    }\n    maxIndex(array) {\n        let index = 0;\n        for (var i = 0; i < array.length; i++){\n            if (array[i] > array[index]) {\n                index = i;\n            }\n        }\n        return index;\n    }\n\n    updateValues(i, value) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = value\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares\n                }\n            ]),\n            stepNumber: history.length\n        }, function () {\n                if (value == \"O\") {\n                    const squares_2 = this.state.history[this.state.history.length - 1][\"squares\"];\n                    const state = this.getState(squares_2);\n                    const state_value = myData[state].split(\",\").map(parseFloat);\n                    const max_val = this.maxIndex(state_value);\n                    this.updateValues(max_val, \"X\");\n            }\n        });\n    }\n\n    handleClick(i) {\n        const player_name = \"O\";\n\n        const squares = this.state.history[this.state.history.length - 1];\n \n        this.updateValues(i, player_name)\n        \n        \n    }\n\n    \n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } \n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                       \n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n           \n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"sourceRoot":""}